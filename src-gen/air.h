/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef AIR_H_
#define AIR_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Air state machine.
*/
typedef struct Air Air;

/*!
* Forward declaration of the data structure for the AirIface interface scope.
*/
typedef struct AirIface AirIface;

/*!
* Forward declaration of the data structure for the AirInternal interface scope.
*/
typedef struct AirInternal AirInternal;

/*!
* Forward declaration of the data structure for the AirTimeEvents interface scope.
*/
typedef struct AirTimeEvents AirTimeEvents;

#ifdef __cplusplus
}
#endif

#include "..\src\sc_types.h"
#include "..\src\sc_rxc.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'air'.
*/

/*! Define number of states in the state enum */
#define AIR_STATE_COUNT 8

/*! Define dimension of the state configuration vector for orthogonal states. */
#define AIR_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define AIR_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_AIR_MAIN_REGION_OPEN 0
#define SCVI_AIR_MAIN_REGION_DOCLOSE 0
#define SCVI_AIR_MAIN_REGION_DOOPEN 0
#define SCVI_AIR_MAIN_REGION_WELDED 0
#define SCVI_AIR_MAIN_REGION_CLOSED 0
#define SCVI_AIR_MAIN_REGION_CLOSED_PWMCONTROLLER_PULLIN 0
#define SCVI_AIR_MAIN_REGION_CLOSED_PWMCONTROLLER_POWERSAVE 0
#define SCVI_AIR_MAIN_REGION_CLOSEFAILED 0

/*! Enumeration of all states */ 
typedef enum
{
	Air_last_state,
	Air_main_region_Open,
	Air_main_region_DoClose,
	Air_main_region_DoOpen,
	Air_main_region_Welded,
	Air_main_region_Closed,
	Air_main_region_Closed_PWMController_PullIn,
	Air_main_region_Closed_PWMController_PowerSave,
	Air_main_region_CloseFailed
} AirStates;


/*! Type declaration of the data structure for the AirIface interface scope. */
struct AirIface
{
	sc_boolean OpenAction_raised;
	sc_boolean CloseAction_raised;
	sc_observable opened;
	sc_observable closed;
	sc_observable failed_open;
	sc_observable failed_closed;
};



/*! Type declaration of the data structure for the AirInternal interface scope. */
struct AirInternal
{
	uint32_t PWM;
	sc_boolean RAD;
};



/*! Type declaration of the data structure for the AirTimeEvents interface scope. */
struct AirTimeEvents
{
	sc_boolean air_main_region_DoClose_tev0_raised;
	sc_boolean air_main_region_DoOpen_tev0_raised;
	sc_boolean air_main_region_Closed_PWMController_PullIn_tev0_raised;
};





typedef struct AirIfaceEvBuf AirIfaceEvBuf;
struct AirIfaceEvBuf {
	sc_boolean OpenAction_raised;
	sc_boolean CloseAction_raised;
};

typedef struct AirTimeEventsEvBuf AirTimeEventsEvBuf;
struct AirTimeEventsEvBuf {
	sc_boolean air_main_region_DoClose_time_event_0_raised;
	sc_boolean air_main_region_DoOpen_time_event_0_raised;
	sc_boolean air_main_region_Closed_PWMController_PullIn_time_event_0_raised;
};

typedef struct AirEvBuf AirEvBuf;
struct AirEvBuf {
	AirIfaceEvBuf iface;
	AirTimeEventsEvBuf timeEvents;
};


/*! 
 * Type declaration of the data structure for the Air state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Air
{
	AirStates stateConfVector[AIR_MAX_ORTHOGONAL_STATES];
	AirIface iface;
	AirInternal internal;
	AirTimeEvents timeEvents;
	AirEvBuf current;
	sc_boolean isExecuting;
};



/*! Initializes the Air state machine data structures. Must be called before first usage.*/
extern void air_init(Air* handle);


/*! Performs a 'run to completion' step. */
extern void air_run_cycle(Air* handle);

/*! Activates the state machine. */
extern void air_enter(Air* handle);

/*! Deactivates the state machine. */
extern void air_exit(Air* handle);



/*! Raises a time event. */
extern void air_raise_time_event(Air* handle, sc_eventid evid);

/*! Raises the in event 'OpenAction' that is defined in the default interface scope. */ 
extern void air_raise_openAction(Air* handle);
/*! Raises the in event 'CloseAction' that is defined in the default interface scope. */ 
extern void air_raise_closeAction(Air* handle);
/*! Returns the observable for the out event 'opened' that is defined in the default interface scope. */ 
extern sc_observable* air_get_opened(Air* handle);

/*! Returns the observable for the out event 'closed' that is defined in the default interface scope. */ 
extern sc_observable* air_get_closed(Air* handle);

/*! Returns the observable for the out event 'failed_open' that is defined in the default interface scope. */ 
extern sc_observable* air_get_failed_open(Air* handle);

/*! Returns the observable for the out event 'failed_closed' that is defined in the default interface scope. */ 
extern sc_observable* air_get_failed_closed(Air* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean air_is_active(const Air* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean air_is_final(const Air* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean air_is_state_active(const Air* handle, AirStates state);


#ifdef __cplusplus
}
#endif 

#endif /* AIR_H_ */
